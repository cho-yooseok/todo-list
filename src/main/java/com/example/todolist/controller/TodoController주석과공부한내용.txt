package com.example.todolist.controller;

import com.example.todolist.model.Todo;
// Todo 데이터 모델 클래스를 가져옵니다
import com.example.todolist.repository.TodoRepository;
// Todo 데이터베이스 접근을 위한 Repository 인터페이스를 가져옵니다
import org.springwork.beans.factory.annotation.Autowired;
// 스프링의 의존성 주입을 위한 어노테이션입니다
import org.springframework.http.ResponseEntity;
// HTTP 응답을 제어하기 위한 클래스입니다
import org.springframework.web.bind.annotation.*;
// 웹 관련 스프링 어노테이션들을 모두 가져옵니다.
import java.util.List;
// 자바의 List 컬렉션 타입을 사용합니다
import java.util.Optional;
// NullPointerException 방지를 위한 Optional 타입을 사용합니다

@RestController
// 이 클래스가 RESTful 웹 서비스의 컨트롤러임을 나타냅니다
@RequestMapping("/api/todos")
// 이 컨트롤러의 모든 API 요청은 "/api/todos" 로 시작합니다
public class TodoController {
// TodoController 클래스를 선언합니다

    @Autowired
    // 스프링이 TodoRepository의 구현체를 자동으로 주입(연결)해 줍니다.
    private TodoRepository todoRepository;
    // Todo 데이터를 관리하는 리포지토리 객체입니다

    @GetMapping
    // HTTP GET 요청을 처리합니다 (모든 Todo 조회)
    public List<Todo> getAllTodos() {
    // 모든 Todo 항목을 반환하는 메서드입니다.
        return todoRepository.findAll();
        // TodoRepository를 이용해 데이터베이스의 모든 Todo를 찾습니다.
    }

    @PostMapping // HTTP 요청을 처리합니다 (새 Todo 생성)
    public Todo createdTodo(@RequestBody Todo todo) {
    // 요청 본문의 Todo 객체를 받아 새 Todo를 생성합니다.
        return todoRepository.save(todo);
        // 받아온 Todo 객체를 데이터베이스에 저장하고 반환합니다.
    }

    @PutMapping("{id}") // HTTP PUT 요청을 처리합니다 (특정 Todo 업데이트)
    public ResponseEntoty<Todo> updateTodo(@PathVariable Long id, @RequestBody Todo todoDetails) {
    // ID와 업데이트할 Todo 상세 정보를 받습니다.
        Optional<Todo> optionalTodo =todoRepository.findById(id);
        // 주어진 ID로 Todo를 찾습니다.

        if(optionalTodo.isPresent()) { // 만약 해당 Todo가 존재하면,
            Todo todo = optionalTodo.get();
            // Optional에서 실제 Todo 객체를 가져옵니다
            todo.setTitle(todoDetails.getTitle());
            // 제목을 업데이트합니다.
            todo.setCompleted(todoDetails.getCompleted());
            // 완료 상태를 업데이트합니다
            return RepositoryEntity.ok(todoRepository.save(todo));
            // 업데이트된 Todo를 저장하고 200OK 응답과 함께 반환합니다.
        }

        return ResponseEntity.notFound().build();
        // 해당 Todo를 찾을 수 없으면 404 Not Found 응답을 반환합니다
    }

    @PatchMapping("/{id}/toggle")
    // HTTP PATCH 요청을 처리합니다 (Todo 완료 상태 토클).
    public ResponseEntity<Todo> toggleTodo(@PathVariable Long id) {
    // ID를 받아 Todo의 완료 상태를 토글합니다
        Optional<Todo> optionalTodo = todoRepository.findById(id);
        // 주어진 ID로 Todo를 찾습니다.

        if (optionalTodo.isPresent()) {
        // 만약 해당 Todo가 존재하면,
            Todo todo = optionalTodo.get();
            // Optional에서 실제 Todo 객체를 가져옵니다
            todo.setCompleted(!todo.getCompleted());
            // 현재 완료 상태를 반전시킵니다.
            return ResponseEntity.ok(todoRepository.save(todo));
            // 변경된 상태를 저장하고 200 OK 응답과 함께 반환합니다.
        }

        return ResponseEntity.notFound().build();
        // 해당 Todo를 찾을 수 없다면 404 Not Found 응답을 반환합니다
    }

    @DeleteMapping("/{id}") // HTTP DELETE 요청을 처리합니다 (특정 Todo 삭제).
    public ResponseEntity<Void> deleteTodo(@PathVariable Long id) {
    // ID를 받아 Todo를 삭제합니다.
        if(todoRepository.existsById(id)) {
        // 해당 ID의 Todo가 존재하는지 확인합니다.
            todoRepository.deleteById(id);
            // 존재하면 Todo를 삭제합니다.
            return ResponseEntity.ok().build();
            // 삭제 성공 시 200 ok 응답을 반환합니다.
        }
        return ResponseEntity.notFound().build();
        // 해당 Todo를 찾을 수 없으면 404 Not Found 응답을 반환합니다.
    }

    @GetMapping("/status/{completed}")
    // HTTP GET 요청을 처리합니다. (완료 상태별 조회)
    public List<Todo> getTodosByStatus(@PathVariable Boolean completed) {
    // 완료 상태 (true/false)를 받아 Todo를 조회합니다.
        return todoRepository.findByCompleted(Completed);
        // Repository의 메서드를 사용하여 해당 상태의 Todo를 찾습니다.
    }

    @GetMapping("/incomplete") // HTTP GET 요청을 처리합니다 (미완료 항목 최신순 조회)
    public List<Todo> getIncompleteTodos() { // 미완료 Todo 항목을 최신순으로 조회합니다.
        return todoRepository.findIncompleteOrderByCreatedAtDesc();
        // Repository의 사용자 정의 메서드를 호출합니다.
    }

    @GetMapping("/completed") // HTTP GET 요청을 처리합니다 (완료 항목 업데이트 최신순 조회).
    public List<Todo> getCompletedTodos() { // 완료된 Todo 항목을 업데이트 최신순으로 조회합니다.
        return todoRepository.findCompletedOrderByUpdatedAtDesc();
        // Repository의 사용자 정의 메서드를 호출합니다.
    }
}


해설
TodoController 클래스는 RESTful API의 진입점 역할을 합니다.
즉, 외부(웹 브라우저, 모바일 앱 등)에서 들어오는 HTTP 요청을 받아서 그에 맞는 로직을 처리하고 응답을
보내주는 역할을 맡고 있습니다.

요청 라우팅 : /api/todos 경로로 들어오는 HTTP 요청(GET, POST, PUT, DELETE, PATCH)을 어떤 메서드가
처리할지 연결해 줍니다.

비즈니스 로직 호출 : 요청에 따라 필요한 데이터(예 : Todo 항목 생성, 수정)를 받아 TodoRepository 같은
다른 서비스 계층의 로직을 호출합니다. 여기서는 데이터베이스 접근을 위한 TodoRepository를 사용합니다.

응답 생성 : 처리 결과를 바탕으로 적절한 HTTP 응답(성공 시 200 OK, 찾을 수 없을 때 404 Not Found 등)을
만들어 클라이언트에게 전달합니다.

정리하면, TodoController 는 클라이언트와 서버 사이의 다리 역할을 하며, To-do 리스트 애플리케이션의
핵심 API를 정의하고 관리하는 중요한 컴포넌트입니다





추가 해설
public List<Todo> getCompletedTodos() {
    return todoRepository.findCompletedOrderByUpdatedAtDesc();
}


List<Todo>
반환 타입 : 이 메서드가 작업을 마치고 반환할 값의 종류를 정의
List<Todo> 는 Todo 객체들을 담을 수 있는 리스트(List)를 반환한다는 뜻입니다

List : 여러 개의 객체를 순서대로 저장하는 자료구조입니다

<Todo> : 이 리스트 안에 들어갈 객체들의 타입이 Todo 라는 것을 명시합니다.
즉, 할 일(Todo) 목록을 담는 리스트라는 의미입니다.

()  :
매개변수 리스트 (Parameter List) : 이 메서드가 호출될 때 전달받을 인자(값)들을 정의하는 부분입니다
() 안에 아무것도 없다는 것은 이 메서드가 외부로부터 어떤 정보도 전달받지 않고,
자체적으로 작업을 수행한다는 의미입니다