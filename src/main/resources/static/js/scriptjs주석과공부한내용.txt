/**
 * @file 투두리스트 프론트엔드 메인 로직
 * @description 서버 API와 통신하여 투두리스트의 CRUD(생성, 읽기, 수정, 삭제) 및 필터링 기능을 담당합니다.
 */

// DOM(Document Object Model) 콘텐츠가 모두 로드된 후에 스크립트를 실행합니다.
// 페이지의 모든 HTML 요소가 준비된 후에 자바스크립트 코드가 실행되도록 보장합니다.
document.addEventListener('DOMContentLoaded', () => {
    // --- 1. 상수 및 DOM 요소 선언 ---

    // 서버 API의 기본 URL을 상수로 정의합니다.
    const API_URL = 'http://localhost:8080/api/todos';
    // HTML에서 id가 'todo-input'인 요소를 가져옵니다. 사용자가 할 일을 입력하는 input 필드입니다.
    const todoInput = document.getElementById('todo-input');
    // id가 'add-button'인 요소를 가져옵니다. 할 일을 추가하는 버튼입니다.
    const addButton = document.getElementById('add-button');
    // id가 'todo-list'인 요소를 가져옵니다. 할 일 목록(ul)이 표시될 영역입니다.
    const todoList = document.getElementById('todo-list');
    // class가 'filter-container'인 요소를 가져옵니다. 필터 버튼들을 감싸는 컨테이너입니다.
    const filterContainer = document.querySelector('.filter-container');
    // id가 'show-all'인 요소를 가져옵니다. '모두 보기' 필터 버튼입니다.
    const showAllBtn = document.getElementById('show-all');

    // --- 2. API 통신 및 핵심 로직 함수 (async/await 스타일) ---

    /**
     * 서버 API 호출을 위한 범용 헬퍼(도우미) 함수
     * @param {string} url - 요청을 보낼 URL
     * @param {object} options - fetch 함수에 전달할 옵션 객체 (method, headers, body 등)
     * @returns {Promise<any>} - 서버로부터 받은 JSON 데이터 또는 내용이 없을 경우 null
     * @throws {Error} - 네트워크 요청 실패 또는 서버 에러 시 예외 발생
     */
    async function fetchHelper(url, options) {
        // fetch API를 사용하여 비동기 네트워크 요청을 보냅니다.
        const response = await fetch(url, options);
        // 서버 응답이 성공적이지 않으면(HTTP 상태 코드가 200-299 범위가 아니면)
        if (!response.ok) {
            // 응답 본문을 JSON으로 파싱하려 시도하고, 실패하면 기본 에러 메시지를 사용합니다.
            const errorData = await response.json().catch(() => ({ message: '서버 응답이 올바르지 않습니다.' }));
            // 에러 메시지를 포함한 Error 객체를 생성하여 던집니다.
            throw new Error(errorData.message || `HTTP 에러! 상태 코드: ${response.status}`);
        }
        // 응답 상태가 204(No Content)이거나 content-length 헤더가 "0"이면
        // 응답 본문이 없으므로 null을 반환합니다.
        if (response.status === 204 || response.headers.get("content-length") === "0") {
            return null;
        }
        // 성공적인 응답의 경우, 응답 본문을 JSON으로 파싱하여 반환합니다.
        return response.json();
    }

    /**
     * 서버에서 투두 목록을 가져와 화면에 렌더링합니다.
     * @param {string} [filter='all'] - 'all', 'incomplete', 'completed' 중 하나의 필터 값
     */
    async function fetchTodos(filter = 'all') {
        let url = API_URL; // 기본 URL은 전체 목록
        if (filter === 'incomplete') url = `${API_URL}/incomplete`; // '미완료' 필터
        else if (filter === 'completed') url = `${API_URL}/completed`; // '완료' 필터

        try {
            // fetchHelper를 사용해 해당 URL로 투두 목록을 요청합니다.
            const todos = await fetchHelper(url);
            // 기존에 표시되던 목록을 모두 지웁니다.
            todoList.innerHTML = '';
            // 받아온 각 투두 항목에 대해 `addTodoToList` 함수를 호출하여 화면에 추가합니다.
            todos.forEach(addTodoToList);
        } catch (error) {
            // 오류 발생 시 콘솔에 에러를 기록하고 사용자에게 알림을 표시합니다.
            console.error('투두리스트 로딩 오류:', error);
            alert(`목록을 불러오지 못했습니다: ${error.message}`);
        }
    }

    /**
     * '추가' 버튼 클릭 또는 'Enter' 키 입력 시 새로운 투두를 생성합니다.
     */
    async function handleAddTodo() {
        // 입력 필드의 값에서 양쪽 공백을 제거합니다.
        const title = todoInput.value.trim();
        // 입력값이 비어있으면 사용자에게 알림을 표시하고 함수를 종료합니다.
        if (title === '') {
            alert('할 일을 입력해주세요.');
            return;
        }

        try {
            // fetchHelper를 사용하여 서버에 POST 요청으로 새 투두 생성을 요청합니다.
            await fetchHelper(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }, // 본문이 JSON 형식임을 명시
                body: JSON.stringify({ title }), // JavaScript 객체를 JSON 문자열로 변환
            });
            // 성공적으로 추가되면 입력창을 비웁니다.
            todoInput.value = '';
            // 현재 설정된 필터에 맞춰 목록을 새로고침합니다.
            updateListBasedOnFilter();
        } catch (error) {
            // 오류 발생 시 콘솔에 기록하고 사용자에게 알림을 표시합니다.
            console.error('투두 추가 오류:', error);
            alert(`투두를 추가하지 못했습니다: ${error.message}`);
        }
    }

    /**
     * 수정된 내용을 서버에 저장합니다.
     * @param {number} id - 수정할 투두의 ID
     * @param {string} newTitle - 새로운 할 일 내용
     */
    async function saveTodo(id, newTitle) {
        // 새로운 내용이 공백뿐이라면 경고하고 함수를 종료합니다.
        if (newTitle.trim() === '') {
            alert('할 일 내용은 비워둘 수 없습니다.');
            return;
        }
        try {
            // fetchHelper를 사용해 서버에 PUT 요청으로 투두 수정을 요청합니다.
            await fetchHelper(`${API_URL}/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title: newTitle }),
            });
            // 성공 시 현재 필터 기준으로 목록을 새로고침합니다.
            updateListBasedOnFilter();
        } catch (error) {
            // 오류 발생 시 콘솔에 기록하고 사용자에게 알림을 표시합니다.
            console.error('투두 업데이트 오류:', error);
            alert(`업데이트에 실패했습니다: ${error.message}`);
            // 실패 시에도 목록을 새로고침하여 원래 상태로 되돌립니다.
            updateListBasedOnFilter();
        }
    }

    /**
     * 투두 항목의 완료/미완료 상태를 토글(전환)합니다.
     * @param {number} id - 상태를 변경할 투두의 ID
     */
    async function toggleTodo(id) {
        try {
            // fetchHelper를 사용해 서버에 PATCH 요청으로 상태 토글을 요청합니다.
            await fetchHelper(`${API_URL}/${id}/toggle`, { method: 'PATCH' });
            // 성공 시 현재 필터 기준으로 목록을 새로고침합니다.
            updateListBasedOnFilter();
        } catch (error) {
            // 오류 발생 시 콘솔에 기록하고 사용자에게 알림을 표시합니다.
            console.error('투두 상태 토글 오류:', error);
            alert(`상태 변경에 실패했습니다: ${error.message}`);
        }
    }

    /**
     * 투두 항목을 삭제합니다.
     * @param {number} id - 삭제할 투두의 ID
     */
    async function deleteTodo(id) {
        // 사용자 확인 대화상자는 이벤트 핸들러에서 직접 처리합니다.
        try {
            // fetchHelper를 사용해 서버에 DELETE 요청으로 투두 삭제를 요청합니다.
            await fetchHelper(`${API_URL}/${id}`, { method: 'DELETE' });
            // 일관성을 위해 전체 목록을 새로고침하여 삭제된 항목을 반영합니다.
            updateListBasedOnFilter();
        } catch (error) {
            // 오류 발생 시 콘솔에 기록하고 사용자에게 알림을 표시합니다.
            console.error('투두 삭제 오류:', error);
            alert(`삭제에 실패했습니다: ${error.message}`);
        }
    }

    // --- 3. DOM 조작 및 렌더링 함수 ---

    /**
     * 투두 객체 하나를 받아 LI 태그로 만들어 목록에 추가합니다.
     * @param {object} todo - {id, title, completed} 형태의 투두 객체
     */
    function addTodoToList(todo) {
        // 새로운 li 요소를 생성합니다.
        const li = document.createElement('li');
        // li 요소의 dataset.id에 투두의 고유 ID를 저장합니다. (이벤트 위임 시 사용)
        li.dataset.id = todo.id;
        // 투두가 완료 상태이면 'completed' 클래스를 추가합니다.
        li.className = todo.completed ? 'completed' : '';

        // 할 일 내용을 표시할 span 요소를 생성합니다.
        const todoText = document.createElement('span');
        todoText.className = 'todo-text';
        todoText.textContent = todo.title;
        // 완료된 항목이면 텍스트에 취소선을 긋는 클래스를 추가합니다.
        if (todo.completed) {
            todoText.classList.add('completed-text');
        }

        // 수정, 완료, 삭제 버튼을 담을 div 컨테이너를 생성합니다.
        const actionButtons = document.createElement('div');
        actionButtons.className = 'action-buttons';

        // '수정' 버튼을 생성합니다.
        const editBtn = document.createElement('button');
        editBtn.className = 'edit-btn';
        editBtn.textContent = '수정';

        // '완료'/'미완료' 토글 버튼을 생성합니다.
        const toggleBtn = document.createElement('button');
        toggleBtn.className = 'toggle-btn';
        toggleBtn.textContent = todo.completed ? '미완료' : '완료';

        // '삭제' 버튼을 생성합니다.
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-btn';
        deleteBtn.textContent = '삭제';

        // '수정' 기능은 수정 시작 시 원래 제목(todo.title)이 필요하므로,
        // 이벤트 위임 대신 개별적으로 리스너를 추가하는 것이 간단합니다.
        editBtn.addEventListener('click', () => editTodo(todo, li, todoText, actionButtons));

        // actionButtons 컨테이너에 버튼들을 추가합니다.
        actionButtons.append(editBtn, toggleBtn, deleteBtn);
        // li 요소에 텍스트와 버튼 컨테이너를 추가합니다.
        li.append(todoText, actionButtons);
        // 완성된 li 요소를 todoList(ul)에 추가합니다.
        todoList.appendChild(li);
    }

    /**
     * 특정 투두 항목을 '수정 모드'로 변경합니다.
     * @param {object} todo - 수정할 투두 객체
     * @param {HTMLElement} li - 수정할 li 요소
     * @param {HTMLElement} todoText - 할 일 내용이 표시된 span 요소
     * @param {HTMLElement} actionButtons - 버튼들을 담고 있는 div 요소
     */
    function editTodo(todo, li, todoText, actionButtons) {
        // 텍스트를 입력할 input 요소를 생성합니다.
        const editInput = document.createElement('input');
        editInput.type = 'text';
        editInput.value = todo.title; // 현재 제목을 기본값으로 설정
        editInput.className = 'edit-input';

        // '저장' 버튼을 생성합니다.
        const saveBtn = document.createElement('button');
        saveBtn.className = 'save-btn';
        saveBtn.textContent = '저장';

        // '취소' 버튼을 생성합니다.
        const cancelBtn = document.createElement('button');
        cancelBtn.className = 'cancel-btn';
        cancelBtn.textContent = '취소';

        // 기존의 span(todoText)을 input(editInput)으로 교체합니다.
        li.replaceChild(editInput, todoText);
        // 기존 버튼들을 지우고 '저장', '취소' 버튼으로 교체합니다.
        actionButtons.innerHTML = '';
        actionButtons.append(saveBtn, cancelBtn);
        // input 필드에 자동으로 포커스를 줍니다.
        editInput.focus();

        // input 필드에서 키보드 입력을 처리하는 함수
        const handleKeyDown = (event) => {
            if (event.key === 'Enter') { // 'Enter' 키를 누르면
                event.preventDefault(); // 폼 제출 등 기본 동작 방지
                saveTodo(todo.id, editInput.value); // 변경 내용 저장
            } else if (event.key === 'Escape') { // 'Escape' 키를 누르면
                updateListBasedOnFilter(); // 수정 취소하고 목록 새로고침
            }
        };

        // 이벤트 리스너를 등록합니다.
        editInput.addEventListener('keydown', handleKeyDown);
        saveBtn.addEventListener('click', () => saveTodo(todo.id, editInput.value));
        cancelBtn.addEventListener('click', () => updateListBasedOnFilter());
    }

    /**
     * 현재 활성화된 필터를 기준으로 목록을 업데이트하는 함수
     */
    function updateListBasedOnFilter() {
        // 필터 컨테이너 내에서 'active' 클래스를 가진 버튼을 찾습니다.
        const activeFilterBtn = document.querySelector('.filter-container button.active');
        // 버튼의 id ('show-all', 'show-incomplete' 등)에서 'show-' 부분을 제거하여 필터 종류('all', 'incomplete')를 얻습니다.
        const filter = activeFilterBtn.id.replace('show-', '');
        // 해당 필터로 목록을 다시 불러옵니다.
        fetchTodos(filter);
    }

    /**
     * 필터 버튼의 활성 상태를 시각적으로 변경하는 함수
     * @param {HTMLElement} activeButton - 활성화할 버튼 요소
     */
    function setActiveFilter(activeButton) {
        // 모든 필터 버튼에서 'active' 클래스를 제거합니다.
        document.querySelectorAll('.filter-container button').forEach(btn => btn.classList.remove('active'));
        // 클릭된 버튼에만 'active' 클래스를 추가합니다.
        activeButton.classList.add('active');
    }

    // --- 4. 이벤트 리스너 설정 및 초기화 ---

    // '추가' 버튼에 클릭 이벤트 리스너를 등록합니다.
    addButton.addEventListener('click', handleAddTodo);
    // 입력 필드에 'keypress' 이벤트 리스너를 등록합니다.
    todoInput.addEventListener('keypress', (event) => {
        // 'Enter' 키가 눌렸을 경우 handleAddTodo 함수를 실행합니다.
        if (event.key === 'Enter') handleAddTodo();
    });

    // 필터 컨테이너에 클릭 이벤트 리스너를 등록합니다. (이벤트 위임)
    // 하위 버튼 중 어느 것을 클릭해도 이 리스너가 동작합니다.
    filterContainer.addEventListener('click', (event) => {
        // 클릭된 요소 또는 그 부모 요소 중 가장 가까운 버튼을 찾습니다.
        const clickedButton = event.target.closest('button');
        // 버튼이 아닌 다른 곳을 클릭했다면 아무것도 하지 않습니다.
        if (!clickedButton) return;

        // 버튼 id에서 필터 종류를 추출합니다.
        const filter = clickedButton.id.replace('show-', '');
        // 클릭된 버튼을 활성 상태로 만듭니다.
        setActiveFilter(clickedButton);
        // 해당 필터로 목록을 불러옵니다.
        fetchTodos(filter);
    });

    // 할 일 목록(ul)에 클릭 이벤트 리스너를 등록합니다. (이벤트 위임)
    // li 안의 버튼들이 클릭될 때 이 리스너가 동작합니다.
    todoList.addEventListener('click', (event) => {
        // 이벤트가 발생한 요소의 가장 가까운 li 부모를 찾습니다.
        const li = event.target.closest('li');
        // li 외부를 클릭했다면 아무것도 하지 않습니다.
        if (!li) return;

        // li의 data-id 속성값을 숫자로 변환하여 가져옵니다.
        const id = Number(li.dataset.id);
        // 클릭된 요소의 클래스 이름을 가져옵니다.
        const targetClass = event.target.className;

        if (targetClass === 'toggle-btn') { // '완료'/'미완료' 버튼을 클릭했다면
            toggleTodo(id);
        } else if (targetClass === 'delete-btn') { // '삭제' 버튼을 클릭했다면
            // 사용자에게 삭제 여부를 확인받습니다.
            if (confirm("정말로 삭제하시겠습니까?")) {
                deleteTodo(id);
            }
        }
    });

    // --- 5. 페이지 최초 로드 시 실행 ---
    /**
     * 페이지 로드 시 초기 상태를 설정하는 함수
     */
    function initialize() {
        // '모두' 버튼을 기본 활성 상태로 설정합니다.
        setActiveFilter(showAllBtn);
        // 전체 투두 목록을 서버에서 불러오며 앱을 시작합니다.
        fetchTodos();
    }

    // 초기화 함수를 호출합니다.
    initialize();
});