/**
 * =============================================
 * CSS 변수 선언 (테마 및 기본값 관리)
 * :root 가상 클래스는 문서의 최상위 요소(<html>)를 선택합니다.
 * 여기에 변수를 선언하면 문서 전체에서 재사용할 수 있어 유지보수성과 일관성이 향상됩니다.
 * =============================================
 */
:root {
    /* 색상 변수: 애플리케이션 전체에서 사용될 색상을 미리 정의합니다. */
    --color-primary: #007BFF;          /* 주 색상 (활성 필터, 저장 버튼 등) */
    --color-primary-dark: #0056b3;     /* 주 색상 (마우스 올렸을 때) */
    --color-success: #4CAF50;         /* 성공 색상 (추가 버튼, 완료 아이콘 등) */
    --color-success-dark: #45a049;     /* 성공 색상 (마우스 올렸을 때) */
    --color-danger: #f44336;          /* 위험 색상 (삭제 아이콘 등) */
    --color-danger-dark: #d32f2f;       /* 위험 색상 (마우스 올렸을 때) */
    --color-text-dark: #333;           /* 진한 텍스트 색상 (제목 등) */
    --color-text-light: #555;          /* 일반 텍스트 색상 (할 일 내용 등) */
    --color-text-muted: #999;          /* 연한 텍스트 색상 (완료된 할 일 등) */
    --color-border: #ddd;              /* 테두리 색상 */
    --color-bg-light: #f0f2f5;         /* 페이지 전체 배경색 */
    --color-bg-container: #ffffff;     /* 메인 컨테이너 배경색 */
    --color-bg-item: #fafafa;           /* 할 일 항목 기본 배경색 */
    --color-bg-item-completed: #e9f5e9;/* 완료된 할 일 항목 배경색 */

    /* 폰트 변수 */
    --font-family-base: 'Noto Sans KR', sans-serif; /* 기본 글꼴 */

    /* 레이아웃 변수 */
    --border-radius-sm: 5px;   /* 작은 모서리 둥글기 */
    --border-radius-md: 8px;   /* 중간 모서리 둥글기 */
    --border-radius-lg: 15px;  /* 큰 모서리 둥글기 */
    --border-radius-pill: 20px;/* 알약 모양의 둥글기 (필터 버튼) */
    --transition-speed: 0.2s;  /* 애니메이션 전환 속도 */
}

/**
 * =============================================
 * 기본 및 레이아웃 스타일
 * =============================================
 */
body {
    font-family: var(--font-family-base); /* 위에서 정의한 기본 글꼴 변수 사용 */
    background-color: var(--color-bg-light); /* 페이지 배경색 변수 사용 */
    display: flex; /* Flexbox 레이아웃을 사용하여 자식 요소를 정렬 */
    justify-content: center; /* 자식 요소를 가로축(수평) 중앙에 배치 */
    align-items: center;   /* 자식 요소를 세로축(수직) 중앙에 배치 */
    min-height: 100vh; /* 최소 높이를 화면 전체 높이로 설정하여 컨테이너가 항상 중앙에 오도록 함 */
    margin: 0; /* body의 기본 마진 제거 */
}

.container {
    width: 100%; /* 너비를 100%로 설정하되, */
    max-width: 500px; /* 최대 너비를 500px로 제한하여 너무 넓어지는 것을 방지 */
    background-color: var(--color-bg-container);
    padding: 30px; /* 내부 여백 */
    border-radius: var(--border-radius-lg); /* 큰 모서리 둥글기 적용 */
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* 입체감을 주는 그림자 효과 */
}

h1 {
    text-align: center; /* 텍스트를 중앙 정렬 */
    color: var(--color-text-dark);
    margin-bottom: 25px; /* 제목 아래쪽 여백 */
}

/**
 * =============================================
 * 입력 및 필터 영역
 * =============================================
 */
.input-container {
    display: flex; /* 자식 요소인 input과 button을 가로로 나란히 배치 */
    gap: 10px; /* 자식 요소 사이의 간격을 10px로 설정 */
    margin-bottom: 20px;
}

/* 모든 input[type="text"]에 대한 공통 스타일 */
input[type="text"] {
    flex-grow: 1; /* flex container 안에서 남는 공간을 모두 차지하도록 설정 (버튼을 제외한 나머지 공간) */
    padding: 12px;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    font-size: 16px;
}

/* JS를 통해 동적으로 추가되는 수정 모드 입력창 전용 스타일 */
.edit-input {
    padding: 8px; /* 기본 입력창보다 작은 패딩 */
    border-color: var(--color-primary); /* 수정 중임을 나타내기 위해 주 색상 테두리 적용 */
}

.filter-container {
    display: flex;
    justify-content: center; /* 필터 버튼들을 중앙에 배치 */
    gap: 10px;
    margin-bottom: 20px;
}

/**
 * =============================================
 * 공통 버튼 스타일
 * =============================================
 */
button {
    cursor: pointer; /* 마우스를 올렸을 때 손가락 모양으로 변경 */
    border: none; /* 기본 테두리 제거 */
    transition: all var(--transition-speed); /* 모든 속성 변경에 0.2초의 부드러운 전환 효과 적용 */
    font-weight: bold; /* 글자를 굵게 */
}

#add-button {
    padding: 12px 20px;
    background-color: var(--color-success);
    color: white;
    border-radius: var(--border-radius-md);
    font-size: 16px;
}
#add-button:hover {
    background-color: var(--color-success-dark); /* 마우스 올리면 더 어두운 성공색으로 변경 */
}

.filter-container button {
    padding: 8px 15px;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-pill); /* 알약 모양으로 설정 */
    background-color: #f9f9f9;
}
/* .active 클래스가 없는 필터 버튼에 마우스를 올렸을 때의 스타일 */
.filter-container button:hover:not(.active) {
    background-color: #eee;
}
/* 현재 활성화된 필터 버튼의 스타일 */
.filter-container button.active {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
    color: white;
}

/* 할 일 항목 내의 액션 버튼들 (수정, 삭제 등)의 공통 스타일 */
.action-buttons button {
    background-color: transparent; /* 배경색을 투명하게 설정 */
}

/* 완료/미완료 토글, 삭제 버튼 (주로 아이콘 폰트로 대체될 수 있음) */
.action-buttons .toggle-btn, .action-buttons .delete-btn {
    font-size: 18px; /* 아이콘처럼 보이도록 글자 크기를 키움 */
}
.action-buttons .toggle-btn { color: var(--color-success); }
.action-buttons .toggle-btn:hover { color: var(--color-success-dark); }
.action-buttons .delete-btn { color: var(--color-danger); }
.action-buttons .delete-btn:hover { color: var(--color-danger-dark); }


/* 수정, 저장, 취소 버튼 (텍스트가 있는 작은 버튼) */
.action-buttons .edit-btn,
.action-buttons .save-btn,
.action-buttons .cancel-btn {
    font-size: 14px;
    padding: 6px 12px;
    border-radius: var(--border-radius-sm);
}

/* 수정 버튼과 취소 버튼은 비슷한 스타일을 공유 */
.action-buttons .edit-btn, .action-buttons .cancel-btn {
    color: #777;
    border: 1px solid var(--color-border);
}
.action-buttons .edit-btn:hover, .action-buttons .cancel-btn:hover {
    background-color: #f0f0f0;
}

/* 저장 버튼은 중요도를 나타내기 위해 주 색상을 사용 */
.action-buttons .save-btn {
    background-color: var(--color-primary);
    color: white;
}
.action-buttons .save-btn:hover {
    background-color: var(--color-primary-dark);
}


/**
 * =============================================
 * 투두 리스트 아이템
 * =============================================
 */
#todo-list {
    list-style-type: none; /* ul의 기본 점(bullet) 모양 제거 */
    padding: 0; /* ul의 기본 패딩 제거 */
}

#todo-list li {
    display: flex;
    align-items: center; /* 내부 요소들을 세로 중앙 정렬 (텍스트와 버튼 높이 맞춤) */
    justify-content: space-between; /* 양쪽 끝으로 요소를 분산 배치 (텍스트는 왼쪽, 버튼은 오른쪽) */
    padding: 15px;
    background-color: var(--color-bg-item);
    border: 1px solid #eee;
    border-radius: var(--border-radius-md);
    margin-bottom: 10px; /* 각 항목 사이의 간격 */
    transition: all var(--transition-speed); /* 배경색 등이 바뀔 때 부드러운 효과 */
}

/* JS에 의해 .completed 클래스가 추가된 li 요소의 스타일 */
#todo-list li.completed {
    background-color: var(--color-bg-item-completed); /* 완료되었음을 나타내는 배경색으로 변경 */
}

.todo-text {
    flex-grow: 1; /* 할 일 텍스트가 가능한 많은 공간을 차지하도록 설정 */
    cursor: pointer; /* 클릭 가능하다는 시각적 힌트 */
    font-size: 17px;
    color: var(--color-text-light);
    /* 긴 텍스트가 영역을 벗어날 때 줄바꿈 처리 */
    overflow-wrap: break-word; /* 긴 영단어가 있을 경우 강제로 줄바꿈 */
    word-break: keep-all; /* 한글의 경우 단어 단위로 줄바꿈하여 가독성 향상 */
}

/* .completed-text 클래스가 추가된 텍스트의 스타일 (완료된 할 일) */
.todo-text.completed-text {
    text-decoration: line-through; /* 취소선 추가 */
    color: var(--color-text-muted); /* 연한 회색으로 변경 */
}

.action-buttons {
    display: flex;
    gap: 8px; /* 버튼들 사이의 간격 */
}


CSS변수 (: root)
색상, 폰트, 레이아웃 값들을 변수로 만들어 코드의 재사용성과 유지보수성을 극대화했습니다.
예를 들어, 테마 색상을 변경하고 싶을 때 --color-primary 변수 값 하나만 수정하면 해당 색상을 사용하는
모든 요소가 한 번에 변경됩니다.

Flexbox 레이아웃
display : flex를 적극적으로 사용하여 요소들의 정렬을 쉽게 처리합니다.
body에서 전체 컨테치너를 수직/ 수평 중앙에 배치하고,
input-container, todo-list li 등에서 내부 요소들을 유연하게 정렬합니다.

일괄성있는 디자인 시스템
버튼, 입력창, 목록 아이템 등의 스타일을 체계적으로 정의합니다.
공통스타일을 먼저 정의하고, 특정 요소에 대한 개별 스타일을 덧붙이는 방식으로 코드중복을 최소화하고
일관성을 유지합니다.

사용자경험ux 향상
cursor
pointer와 hobor 효과를 통해 사용자가 클릭 가능한 요소임을 쉽게 인지하도록 돕습니다.
transition 속성을 사용하여 상태변화(마우스 오버, 활성화 등)가 부드럽게 일어나도록 하여 시각적인 편안함을 줍니다.
word-break 속성으로 긴 텍스트가 깨지지 않고 자연스럽게 줄바꿈되도록 하여 가독성을 높입니다.

동적 상태 변화 대응:
JavaScript에 의해 동적으로 추가/ 제거될
.completed
.active
.completed-text 와 같은 클래스들에 대한 스타일을 미리 정의해두었습니다.
이를 통해
JavaScript 가 클래스만 제어하면 CSS가 알아서 시각적 변화를 처리하도록 역할을 분담합니다.
